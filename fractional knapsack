#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
  int weight;
  int profit;
  double ratio; 
};

bool compareItems(const Item& a, const Item& b) {
  return a.ratio > b.ratio; 
}

double fractionalKnapsack(const vector<Item>& items, int capacity) {
  double totalProfit = 0.0;
  int remainingWeight = capacity;

  
  vector<Item> sortedItems = items;
  sort(sortedItems.begin(), sortedItems.end(), compareItems);

  
  for (const Item& item : sortedItems) {
    if (remainingWeight == 0) {
      break;
    }

    double fraction = min(1.0, double(remainingWeight) / item.weight);
    totalProfit += fraction * item.profit;
    remainingWeight -= fraction * item.weight;
  }

  return totalProfit;
}

int main() {
  int n, capacity;
  cout << "Enter number of items: ";
  cin >> n;
  cout << "Enter knapsack capacity: ";
  cin >> capacity;

  vector<Item> items(n);
  for (int i = 0; i < n; ++i) {
    cout << "Enter weight and profit for item " << i + 1 << ": ";
    cin >> items[i].weight >> items[i].profit;
    items[i].ratio = double(items[i].profit) / items[i].weight;
  }

  double maxProfit = fractionalKnapsack(items, capacity);
  cout << "Maximum profit achievable: " << maxProfit << endl;

  return 0;
}
